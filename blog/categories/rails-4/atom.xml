<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails 4 | Dacer Blog]]></title>
  <link href="http://dacer.github.io/blog/categories/rails-4/atom.xml" rel="self"/>
  <link href="http://dacer.github.io/"/>
  <updated>2014-02-15T17:31:04+08:00</updated>
  <id>http://dacer.github.io/</id>
  <author>
    <name><![CDATA[Dacer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Code School笔记 - Zombie Outlaws level 2]]></title>
    <link href="http://dacer.github.io/blog/2014/02/15/code-school-bi-ji-zombie-outlaws-level-2/"/>
    <updated>2014-02-15T15:10:57+08:00</updated>
    <id>http://dacer.github.io/blog/2014/02/15/code-school-bi-ji-zombie-outlaws-level-2</id>
    <content type="html"><![CDATA[<h3>Finders</h3>

<p>米什么好说的
<code>ruby
Post.where(author: 'admin') # returns an ActiveRecord::Relation
</code></p>

<h3>Find_By</h3>

<p><code>ruby
Post.find_by(title: 'Rails 4') #returns a single model object, or possibly a collection of model objects in an Array (not a Relation). If nothing is found, an ActiveRecord::RecordNotFound exception is raised.
</code></p>

<h4>Find_by 与 where</h4>

<p>用源码解释：
```ruby
def find_by(*args)</p>

<pre><code>where(*args).take
</code></pre>

<p>end
<code>
所以可以接受和 where 一样的 arguments
</code>ruby
Post.find_by(&ldquo;published_on &lt; ?&rdquo;, 2.weeks.ago)
```</p>

<h3>Find_or_*</h3>

<p>Rail 4 简化了 3 的<code>Find_or_*</code>方法
<code>ruby
Post.find_or_initialize_by(title: "rails 4")
Post.find_or_create_by(title: "rails 4")
</code>
其中<code>find_or_create_by</code>可以和<code>after_create</code>相结合使用：
```ruby
Post.find_or_create_by(title: &lsquo;Rails 4&rsquo;)</p>

<h1>if Post not found ↓</h1>

<p>Post.create(title: &lsquo;Rails 4&rsquo;)</p>

<p>class Post &lt; ActiveRecord::Base</p>

<pre><code>after_create :foo
def foo
  posts = Post.where(author: 'admin')
  ...
    end
</code></pre>

<p>end
```</p>

<h3>Update &amp; Update_column</h3>

<p><code>ruby
@post.update(post_params) #update attribute
@post.update_columns(post_params)
</code></p>

<h3>Model.all</h3>

<p><code>ruby
@tweets = Tweet.all # returns an ActiveRecord::Relation
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code School笔记 - Zombie Outlaws level 1]]></title>
    <link href="http://dacer.github.io/blog/2014/02/15/code-school-bi-ji-zombie-outlaws-level-1/"/>
    <updated>2014-02-15T15:10:57+08:00</updated>
    <id>http://dacer.github.io/blog/2014/02/15/code-school-bi-ji-zombie-outlaws-level-1</id>
    <content type="html"><![CDATA[<h2>Match Routes</h2>

<p>有两种方式
<code>
post '/somewhere', to: 'controller#action'
match '/somewhere', to: 'controller#action', via: :post
match '/somewhere', to: 'controller#action', via: :all
</code></p>

<h2>Concern</h2>

<p>用来简化route
```
concern :sociable do
  resources :comments
  resources :tags
end</p>

<p>resources :posts, concerns: :sociable
resources :items, concerns: :sociable
<code>
可以加上选项
</code>
concern :sociable do |options|
  resources :comments, options
  resources :tags, options
end</p>

<p>resources :msgs, concerns: :sociable
resources :posts, concerns: :sociable
resources :items do
  concerns :sociable, only: :create
end
<code>
可以单独封装起来
</code>ruby</p>

<h1>app/concerns/sociable.rb</h1>

<p>class Sociable</p>

<pre><code>def self.call(mapper, options)
  mapper.resources :comments, options
mapper.resources :tags, options
</code></pre>

<p>  end
end</p>

<h1>routes.rb</h1>

<p>concern :sociable， Sociable</p>

<h1>&hellip;</h1>

<p>```</p>

<h3>Thread-Safety</h3>

<p>In Rails 4
<code>ruby
MyApp::Application.configure do
  config.cache_classes = true
  config.eager_load = true
end
</code></p>
]]></content>
  </entry>
  
</feed>
