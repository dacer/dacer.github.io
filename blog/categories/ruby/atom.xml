<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Dacer Blog]]></title>
  <link href="http://dacer.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://dacer.github.io/"/>
  <updated>2014-02-12T21:34:52+08:00</updated>
  <id>http://dacer.github.io/</id>
  <author>
    <name><![CDATA[Dacer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Code School笔记 - Ruby Bits 2]]></title>
    <link href="http://dacer.github.io/blog/2014/02/12/code-schoolbi-ji-ruby-bits-2/"/>
    <updated>2014-02-12T19:02:51+08:00</updated>
    <id>http://dacer.github.io/blog/2014/02/12/code-schoolbi-ji-ruby-bits-2</id>
    <content type="html"><![CDATA[<h2>Block</h2>

<p>Block保存可以使用<code>Proc.new</code>和<code>Lambda</code>.</p>

<h3>Proc.new</h3>

<p>Proc可以用<code>{}</code>或者<code>do end</code>来定义，<code>call</code>来执行
```ruby
my_proc = Proc.new{ p &ldquo;proc&rdquo; }
my_proc = Proc.new do</p>

<pre><code>p "proc"
</code></pre>

<p>end
my_proc.call
```</p>

<h3>Lambda</h3>

<p>Lambda可以直接用<code>= -&gt;</code>来定义<strong>(Ruby1.9以上)</strong>
<code>ruby
my_proc = lambda { p "proc" }
my_proc = -&gt; { p "proc" }
my_proc.call
</code></p>

<h3>使用场景</h3>

<p>可以把Proc直接作为变量传入方法的参数中
```ruby
def print(proc)</p>

<pre><code>proc.call
</code></pre>

<p>end</p>

<p>my_proc = &ndash;> { p &ldquo;proc&rdquo; }
print(my_proc) # &ldquo;proc&rdquo;
```</p>

<h3>需要注意</h3>

<p><code>array.each( )</code>括号中放入的proc前必须加<code>&amp;</code>,<code>&amp;</code>可以把proc变为block
<code>ruby
tweets.each(&amp;printer)
</code>
当定义的方法中需要用到 block 时可以：
<code>ruby
 def each(&amp;block)
   tweets.each(&amp;block)
 end
</code></p>

<h3>其它</h3>

<ul>
<li>在方法中用<code>block_given?</code>可以知道调用此方法时是否提供了block</li>
<li>lambda在生成时可以记住。。什么 <strong>需要回顾一下</strong>
```ruby
def tweet_as(user)
lambda { |tweet| p &ldquo;#{user}: #{tweet}&rdquo;}
end</li>
</ul>


<p>dacer_tweet = tweet_as(&ldquo;dacer&rdquo;)
dacer_tweet.call(&ldquo;Hello&rdquo;) # => dacer: Hello
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开新坑了，基于sinatra的中韩汇率查看网站]]></title>
    <link href="http://dacer.github.io/blog/2013/09/29/e5bc80e696b0e59d91e4ba86efbc8ce59fbae4ba8esinatrae79a84e4b8ade99fa9e6b187e78e87e69fa5e79c8be7bd91e7ab99/"/>
    <updated>2013-09-29T23:15:16+08:00</updated>
    <id>http://dacer.github.io/blog/2013/09/29/e5bc80e696b0e59d91e4ba86efbc8ce59fbae4ba8esinatrae79a84e4b8ade99fa9e6b187e78e87e69fa5e79c8be7bd91e7ab99</id>
    <content type="html"><![CDATA[<p><a href="http://huilv-idacer.rhcloud.com/">&mdash;-点击查看&mdash;&ndash;</a></p>

<p>大概就是sinatra做后端进行post等行为在银联官网上读取银联汇率，前端直接显示结果。</p>

<p>部署在了openshift上（就剩1个免费份额了好捉急！）</p>

<p>显示效果嘛很明显是抄袭google now。。果然我的设计是硬伤。。</p>

<p>当然这个是开源的，不过没啥意义就是了。。</p>

<p>github: <a href="https://github.com/dacer/RMB2WON">https://github.com/dacer/RMB2WON</a></p>

<p>todos:
• <del>汇率计算器 触摸和输入型</del></p>

<p>• FAQ</p>

<p>analytic</p>
]]></content>
  </entry>
  
</feed>
