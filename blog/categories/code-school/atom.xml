<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code School | Dacer Blog]]></title>
  <link href="http://dacer.github.io/blog/categories/code-school/atom.xml" rel="self"/>
  <link href="http://dacer.github.io/"/>
  <updated>2014-02-12T20:55:32+08:00</updated>
  <id>http://dacer.github.io/</id>
  <author>
    <name><![CDATA[Dacer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Code School笔记 - Ruby Bits 2]]></title>
    <link href="http://dacer.github.io/blog/2014/02/12/code-schoolbi-ji-ruby-bits-2/"/>
    <updated>2014-02-12T19:02:51+08:00</updated>
    <id>http://dacer.github.io/blog/2014/02/12/code-schoolbi-ji-ruby-bits-2</id>
    <content type="html"><![CDATA[<h2>保存 Block 的两种方式</h2>

<p>分为<code>Proc.new</code>和<code>Lambda</code>.</p>

<h3>Proc.new</h3>

<p>Proc可以用<code>{}</code>或者<code>do end</code>来定义，<code>call</code>来执行
```ruby
my_proc = Proc.new{ p &ldquo;proc&rdquo; }
my_proc = Proc.new do</p>

<pre><code>p "proc"
</code></pre>

<p>end
my_proc.call
```</p>

<h3>Lambda</h3>

<p>Lambda可以直接用<code>= -&gt;</code>来定义<strong>(Ruby1.9以上)</strong>
<code>ruby
my_proc = lambda { p "proc" }
my_proc = -&gt; { p "proc" }
my_proc.call
</code></p>

<h3>使用场景</h3>

<p>可以把Proc直接作为变量传入方法的参数中
```ruby
my_proc = &ndash;> { p &ldquo;proc&rdquo; }</p>

<p>def print(proc)</p>

<pre><code>proc.call
</code></pre>

<p>end</p>

<p>print(my_proc) # &ldquo;proc&rdquo;
```</p>
]]></content>
  </entry>
  
</feed>
